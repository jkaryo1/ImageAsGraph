Jon Karyo, Calvin Knowlton, David Feldman, Derek Fischer
jkaryo1, cknowlt3, dfeldma9, dfisch11
--------------------------------------------//

Part I - Graph Implementation 

--------------------------------------------//

Part 1 was relatively easy as all we had to do was 
slightly alter the GraphAdjMatrix.java implementation
and make it use an  adjacency/incidence list. We chose 
to use a hashmap list that holds a vertex and a Linked List
of Edges incident to the vertex that are inserted in order. 
We originally used an array list to store our incident edges,
but thought that a linked list would be more efficient, 
especially so because we chose to store our edges ordered.
We all worked and tested each others' code so it is hard 
to say who exactly did what.

--------------------------------------------//

Part II - Minimally Weighted Spanning Trees

--------------------------------------------//

Part 2 was not that difficult but much worse than part 1. We had
a decent amount of trouble with our PQHeap and were banging our
heads against the wall until we realized that our issue was not
with our PQHeap but instead our PQHeapTest. Once we recreated our
Junit test, we were able to push past our PQHeap issues. Also with
Kruskal's, we had a little trouble completely understanding the
use of the given Partition class, but once we were able to wrap
our heads around it, Kruskal's became rather trivial. 

--------------------------------------------//

Part III - Images as Graphs

--------------------------------------------//

NOTES HERE
